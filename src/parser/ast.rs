use std::collections::HashMap;

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum AstRecordKey {
    String(String),
    Integer(String),
    Float(String),
    Char(char),
}

/**
 * The AST is a tree of nodes that represent the program.
 * All nodes are expressions, and the root node is the program itself.
 * The AST is generated by the parser, and then interpreted by the interpreter module or compiled.
 */
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum Ast {
    FunctionCall(String, Vec<Ast>),
    Integer(String),
    Float(String),
    String(String),
    Char(char),
    TypeIdentifier(String),
    Tuple(Vec<Ast>),
    List(Vec<Ast>),
    Record(HashMap<AstRecordKey, Ast>),
    /**
     * Block expression evaluates all expressions in the block and returns the value of the last expression.
     */
    Block(Vec<Ast>),
}

/**
 * Create a new unit AST node.
 * Implemented as a tuple with no elements.
 */
pub fn unit() -> Ast {
    Ast::Tuple(vec![])
}
