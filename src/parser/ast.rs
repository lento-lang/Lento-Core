use std::collections::HashMap;

use crate::{lexer::op::Operator, type_checker::types::{Type, FunctionParameterType, GetType, CheckedType}, interpreter::value::Value};

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum RecordKeyAst {
    String(String),
    Integer(String),
    Float(String),
    Char(char),
}

/**
 * The AST is a tree of nodes that represent the program.
 * All nodes are expressions, and the root node is the program itself.
 * The AST is generated by the parser, and then interpreted by the interpreter module or compiled.
 */
#[derive(Debug, Clone, PartialEq)]
pub enum Ast {
    Literal(Value), // Primitive values such as Integer, Float, String, Char and Boolean (NOT compound data structures)
    Tuple(Vec<Ast>, CheckedType),
    List(Vec<Ast>, CheckedType),
    Record(HashMap<RecordKeyAst, Ast>, CheckedType),
    Identifier(String, CheckedType),
    TypeIdentifier(String, CheckedType),
    FunctionCall(String, Vec<Ast>, CheckedType),
    Function(String, FunctionParameterType, Box<Ast>, CheckedType),
    Binary(Box<Ast>, Operator, Box<Ast>, CheckedType),
    Unary(Operator, Box<Ast>, CheckedType),
    Assignment(Box<Ast>, Box<Ast>, CheckedType),
    /**
     * Block expression evaluates all expressions in the block and returns the value of the last expression.
     */
    Block(Vec<Ast>, CheckedType),
}

impl GetType for Ast {
    fn get_type(&self) -> CheckedType {
        Some(match self {
            Ast::Literal(value) => return value.get_type(),
            Ast::Tuple(_, Some(t)) => t.clone(),
            Ast::List(_, Some(t)) => t.clone(),
            Ast::Record(_, Some(t)) => t.clone(),
            Ast::Identifier(_, Some(t)) => t.clone(),
            Ast::TypeIdentifier(_, Some(t)) => t.clone(),
            Ast::FunctionCall(_, _, Some(t)) => t.clone(),
            Ast::Function(_, _, _, Some(t)) => t.clone(),
            Ast::Binary(_, _, _, Some(t)) => t.clone(),
            Ast::Unary(_, _, Some(t)) => t.clone(),
            Ast::Assignment(_, _, Some(t)) => t.clone(),
            Ast::Block(_, Some(t)) => t.clone(),
            _ => return None,
        })
    }
}

pub fn tuple(elements: Vec<Ast>) -> Ast {
    Ast::Tuple(elements, None)
}

/**
 * Create a new unit AST node.
 * Implemented as a tuple with no elements.
 */
pub fn unit() -> Ast {
    Ast::Tuple(vec![], Some(Type::Unit))
}
